---
title: "Day 8 interactive"
format: html
editor: visual
---

## Review

```{r}
library(tidyverse)
library(here)
library(janitor)

library(ggrepel)
library(gghighlight)
library(paletteer)
library(paletteer)
library(ggExtra)
library(ggbeeswarm)

library(gapminder)
library(sf)
```

```{r}
lizards <- read_csv(here("data_tidy","lizards.csv"))
```

Do some data wrangling to create a new subset form lizards where you:

1.  Limit the data to only contain western whiptails, colorado, checkered, and eastern fence lizards
2.  Add a new column with total length converted to cm
3.  Group by species and sites
4.  Return a summary table with mean total length and standard deviation of total length by species and site

```{r}

new_lizards <- lizards %>% filter(common_name %in% c("western whiptail","colorado checkered","eastern fence")) %>% mutate(total_length_cm = total_length/10) %>% 
  group_by(common_name,site) %>% summarize(mean_length = 
                                             mean(total_length_cm, na.rm = TRUE),
                                         sd_length = 
                                           sd(total_length_cm, na.rm = TRUE))


```

### Facets

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight )) +
  geom_point(aes(color = common_name)) + 
  # facet_wrap is the function for wrapping here we set the common name as the fucntion we are wrapping over ~common_name,
  # scales = "free" set different scales for each graph
  facet_wrap(~common_name, scales = 'free')
```

## Bar chart

```{r}
lizards_count <- lizards %>% 
  dplyr::count(common_name)


ggplot(lizards_count, aes(x = common_name, y = n)) +geom_col(aes(fill = common_name))

## ggplot plots strings in alphabetical order
## Issues: axis names are overlapping, not in meaningful order, labels are not descriptive, 

# flip the order
ggplot(lizards_count, aes( y= common_name, x = n)) +geom_col(aes(fill = common_name))
## want groups to show up in meaningul way in ggplot they need to converted to factors
#fct_reorder(column with data, what column should it look for to see the order)

ggplot(lizards_count, aes( y= fct_reorder(common_name,n), x = n)) +geom_col(aes(fill = common_name))


```

### Scales

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight )) +
  geom_point(aes(color = weight)) +
  ## change the scale increments and breaks(lines on graph)-increments
  scale_y_continuous(limits = c(0,100),
                     breaks = seq(from = 0, to = 100, by= 20), 
                     # get rid of space in graph at the bottom
                     expand = c(0,0)) + scale_color_gradientn(colors = c("red","navy","orange"))
## use scale_color_gradientn(colors = c("yellow","orange","purple))
```

## Part 2

```{r}
ggplot(data = gapminder, aes(x = lifeExp, y= gdpPercap)) + geom_point()+ 
  ## annotate and give the position 
  annotate("text", x = 40, y = 90000, label = "A label!")+
  # vertical and horizontal threshold line (line) 
  geom_hline(yintercept = 70000, linetype = "dotted", color ="purple")+
  #add a vertical line where the mean is 
  geom_vline(xintercept = mean(gapminder$lifeExp))
```

Pipe straight into a ggplot

```{r}
gapminder %>% 
  # keep data in 2002 for Europe
  filter(continent == "Europe" & year == 2002) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point(shape = 18, size = 4, color = "purple")+ #geom_text_repel(aes(label = country)) + ##ggrepel  
  gghighlight(country == "Poland", label_key = "country")


gapminder %>% 
# keep data in 2002 for Europe
  filter(continent == "Europe" & year == 2002) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) + geom_point() + geom_text_repel(aes(label = country)) + ##ggrepel  
  gghighlight(country == "Poland")
```

Create a ggplot chart using data only from 2007, then highlight all countries in Europe, adding their country name as the label using the same x and y

```{r}
gapminder %>% 
  filter(year == 2007) %>% 
  ggplot(aes(x = gdpPercap, y = lifeExp)) +
  geom_point()+  geom_text_repel(aes(label = country)) +
           gghighlight(country == "Norway")
```

### sf package: Spatial data

```{r}

## the spatial component will remain stuck to it here we selected just the name and the geometry remained
# select can also be used to rename name
#For geom_sf we do not need to specify where the geometry is it will look for it
jornada_veg <- read_sf(here("data_raw/spatial_vegetation","doc.kml")) %>% 
  select(name = Name)

ggplot() + geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::manyeys") + 
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"),
        plot.background = element_rect(fill = 'yellow'),
        panel.grid = element_line(color = "magenta"))

## must specify the element
#element_line : grid line to change 

ggplot() + geom_sf(data = jornada_veg, aes(fill = name), color = NA) +
  theme_minimal() +
  scale_fill_paletteer_d(palette = "ggthemes::Hue_Circle") + 
  theme(panel.background = element_rect(color = "purple", size = 5, fill = "pink"),
        plot.background = element_rect(fill = 'yellow'),
        panel.grid.major = element_line(color = "magenta"),
        axis.text.x = element_text(color = "red")) 



```
